from django.db import models
from django.contrib.postgres.fields import ArrayField

class Questions(models.Model):
    created_timestamp = models.DateTimeField(auto_now_add=True)
    modified_timestamp = models.DateTimeField(auto_now_add=True)
    deleted = models.BooleanField(default=False)
    question = models.TextField()
    answer_choices = ArrayField(models.CharField(blank=False))
    has_other = models.BooleanField()

    def __str__(self):
        return self.question

class Answer(models.Model):
    created_timestamp = models.DateTimeField(auto_now_add=True)
    question_fk = models.ForeignKey("Questions", on_delete=models.SET_NULL, null=True)
    answer = models.CharField(max_length=255)
    client_id = models.IntegerField()
    deleted = models.BooleanField(default=False)

    def __str__(self):
        return self.answer

class ClientData(models.Model):
    # id field is automatically generated by django, we
    # can create seperate id's for daily visitors, monthly
    # visitors, etc.
    date = models.DateTimeField(auto_now_add=True)
    start_time = models.TimeField(auto_now_add=True)
    completion_time = models.TimeField(auto_now_add=True)

    LANGUAGE_CHOICES = [
        ('ES', 'Spanish'),
        ('ZH', 'Traditional Chinese/Simplified Chinese'),
        ('VI', 'Vietnamese'),
        ('EN', 'English'),
        ('UK', 'Ukrainian'),
        ('RU', 'Russian'),
        ('AR', 'Arabic'),
        ('HT', 'Haitian Creole'),
        ('FA', 'Persian'),
        ('LO', 'Lao'),
    ]
    language = models.CharField(max_length=2, choices=LANGUAGE_CHOICES)

    family_size = models.PositiveIntegerField()

    SNAP_BENEFITS_CHOICES = [
        ('YES', 'Yes'),
        ('NO', 'No'),
    ]
    snap_benefits = models.CharField(max_length=3, choices=SNAP_BENEFITS_CHOICES)

    TRAVEL_BY_CAR_CHOICES = [
        ('YES', 'Yes'),
        ('NO', 'No'),
    ]
    travel_by_car = models.CharField(max_length=3, choices=TRAVEL_BY_CAR_CHOICES)

    zip_code = models.CharField(max_length=5)


class Language(models.Model):
    language_id = models.BigIntegerField(primary_key=True)
    language_abreviation = models.CharField()
    language_name = models.CharField()
    language_prompt = models.CharField()

    def __str__(self):
        return self.language_name
    
class Client(models.Model):
    client_id = models.BigIntegerField(primary_key=True)
    timestamp = models.DateTimeField(auto_now_add=True)
    language_id = models.ForeignKey(Language, on_delete=models.CASCADE)

    def __str__(self):
        return self.client_id   
    
class AnswerType(models.Model):
    answer_type_id = models.BigIntegerField(primary_key=True)
    type_name = models.CharField()

    def __str__(self):
        return self.type_name
    
class QuestionType(models.Model):
    question_type_id = models.BigIntegerField(primary_key=True)
    answer_type_id = models.ForeignKey(AnswerType, on_delete=models.CASCADE)
    question_name = models.CharField()
    display_on_questionnaire = models.BooleanField(default=True)
    display_order = models.IntegerField()

    def __str__(self):
        return self.question_name
    
class ClientAnswer(models.Model):
    client_id = models.ForeignKey(Client, on_delete=models.CASCADE)
    question_type_id = models.ForeignKey(QuestionType, on_delete=models.CASCADE)
    client_answer = models.CharField()

    def __str__(self):
        return self.client_answer  

class QuestionTranslation(models.Model):
    question_id = models.BigIntegerField(primary_key=True)
    question_type_id = models.ForeignKey(QuestionType, on_delete=models.CASCADE)
    language_id = models.ForeignKey(Language, on_delete=models.CASCADE)
    question_text = models.CharField()

    def __str__(self):
        return self.question_text 

class AnswerTranslation(models.Model):
    answer_id = models.BigIntegerField(primary_key=True)
    question_type_id = models.ForeignKey(QuestionType, on_delete=models.CASCADE)
    language_id = models.ForeignKey(Language, on_delete=models.CASCADE)
    associated_boolean = models.BooleanField(null=True)
    associated_integer = models.IntegerField(null=True)
    associated_text = models.CharField(null=True)
    answer_text = models.CharField()

    def __str__(self):
        return self.answer_text        

    
    